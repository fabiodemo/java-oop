package exerciciojlist;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/* * @author Fabio */
public class ExercicioIII extends javax.swing.JFrame {
    DefaultListModel listmodel = new DefaultListModel();
    DefaultListModel listModel = new DefaultListModel();
    private Arquivo a;
    
    public ExercicioIII() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ListCidades = new javax.swing.JList();
        ButtonAdd = new javax.swing.JButton();
        ButtonRemove = new javax.swing.JButton();
        ButtonSave = new javax.swing.JButton();
        ButtonClean = new javax.swing.JButton();
        BoxEstado = new javax.swing.JComboBox();
        TextCidade = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Estados e suas Cidades");

        jLabel1.setFont(jLabel1.getFont().deriveFont(jLabel1.getFont().getSize()+7f));
        jLabel1.setText("Estado:");

        jLabel3.setFont(jLabel3.getFont().deriveFont(jLabel3.getFont().getSize()+7f));
        jLabel3.setText("Cidades Cadastradas:");

        jLabel2.setFont(jLabel2.getFont().deriveFont(jLabel2.getFont().getSize()+7f));
        jLabel2.setText("Cidade:");

        ListCidades.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jScrollPane1.setViewportView(ListCidades);

        ButtonAdd.setText("Adicionar");
        ButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonAddActionPerformed(evt);
            }
        });

        ButtonRemove.setText("Remover");
        ButtonRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonRemoveActionPerformed(evt);
            }
        });

        ButtonSave.setText("Salvar");
        ButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonSaveActionPerformed(evt);
            }
        });

        ButtonClean.setText("Limpar");
        ButtonClean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonCleanActionPerformed(evt);
            }
        });

        BoxEstado.setEditable(true);
        BoxEstado.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        BoxEstado.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "", "Acre – AC", "Alagoas – AL", "Amapá – AP", "Amazonas – AM", "Bahia – BA", "Ceará – CE", "Distrito Federal – DF", "Espírito Santo – ES", "Goiás – GO", "Maranhão – MA", "Mato Grosso – MT", "Mato Grosso do Sul – MS" }));
        BoxEstado.setToolTipText("");
        BoxEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoxEstadoActionPerformed(evt);
            }
        });

        TextCidade.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        TextCidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextCidadeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(BoxEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel3)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(TextCidade)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ButtonRemove)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(ButtonAdd, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(ButtonClean, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(ButtonSave, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(BoxEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(TextCidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ButtonAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ButtonRemove)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ButtonSave)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ButtonClean)))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonAddActionPerformed
        if((TextCidade.getText()).isEmpty() || (BoxEstado.getSelectedItem().toString()).isEmpty()){
            JOptionPane.showMessageDialog(null, "Digite uma cidade e seu respectivo estado!");
        }
        else{
            String con= TextCidade.getText() + " " + BoxEstado.getSelectedItem().toString();
            ListCidades.setModel(listmodel);
            listmodel.addElement(con);
        }
    }//GEN-LAST:event_ButtonAddActionPerformed

    private void ButtonRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonRemoveActionPerformed
        if(listmodel.isEmpty())
            JOptionPane.showMessageDialog(null, "Selecione um item para apagá-lo!");
        else{
            listmodel.removeElementAt(ListCidades.getSelectedIndex());
        }
    }//GEN-LAST:event_ButtonRemoveActionPerformed

    private void ButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonSaveActionPerformed
        a = new Arquivo(BoxEstado.getSelectedItem().toString());
        try {
            if(!listModel.isEmpty()){
                for (int i = 0; i < listModel.getSize(); ++i){
                        listmodel.addElement(listModel.getElementAt(i));
                        System.out.println(listModel.getElementAt(i));
                }
            }
            System.out.println(listmodel.getSize());
            for(int i = 0; i< listmodel.getSize();i++){
                  a.gravar((String) listmodel.getElementAt(i));
            }
        } catch (IOException ex) {
            Logger.getLogger(ExercicioIII.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ButtonSaveActionPerformed

    private void ButtonCleanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonCleanActionPerformed
        listmodel.removeAllElements();
        File f= new File(BoxEstado.getSelectedItem().toString()+".txt");
        f.delete();
    }//GEN-LAST:event_ButtonCleanActionPerformed

    private void BoxEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoxEstadoActionPerformed
            listmodel.removeAllElements();
            File temp = null;
               try {
                   temp = File.createTempFile(BoxEstado.getSelectedItem().toString(), ".txt");
               } catch (IOException ex) {
                   Logger.getLogger(ExercicioIII.class.getName()).log(Level.SEVERE, null, ex);
               }             
               boolean exists = temp.exists();
               if(temp.exists()){
                   BufferedReader in = null;
                   String line;
                   try {
                       in = new BufferedReader(new FileReader(BoxEstado.getSelectedItem().toString()+".txt"));
                       while ((line = in.readLine()) != null) {
                           listmodel.addElement(line);
                       }
                   } catch (IOException ex) {
                      
                   } finally {
                       if (in != null) {
                           try {
                               in.close();
                           } catch (IOException ex) {
                               Logger.getLogger(ExercicioIII.class.getName()).log(Level.SEVERE, null, ex);
                           }
                       }
                   }
                   ListCidades.setModel(listmodel);
        /*       BoxEstado.addActionListener (new ActionListener() {

           @Override
           public void actionPerformed(ActionEvent e) {
               listmodel.removeAllElements();
               File temp = null;
               try {
                   temp = File.createTempFile(BoxEstado.getSelectedItem().toString(), ".txt");
               } catch (IOException ex) {
                   Logger.getLogger(ExercicioIII.class.getName()).log(Level.SEVERE, null, ex);
               }
               
               boolean exists = temp.exists();
               if(temp.exists()){
                   System.out.print("teste");
                   BufferedReader in = null;
                   String line;
                   DefaultListModel listModel = new DefaultListModel();
                   try {
                       in = new BufferedReader(new FileReader(BoxEstado.getSelectedItem().toString()+".txt"));
                       while ((line = in.readLine()) != null) {
                           //listModel.addElement(line); //(String.valueof(line));
                           listmodel.addElement(line);
                       }
                   } catch (IOException ex) {
                      
                   } finally {
                       if (in != null) {
                           try {
                               in.close();
                           } catch (IOException ex) {
                               Logger.getLogger(ExercicioIII.class.getName()).log(Level.SEVERE, null, ex);
                           }
                       }
                   }
                   //JList jList1 = new JList(listModel);
                   ListCidades.setModel(listmodel);
                   
               }
           }
       }); */
               }
    }//GEN-LAST:event_BoxEstadoActionPerformed

    private void TextCidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextCidadeActionPerformed
               File temp = null;
               try {
                   temp = File.createTempFile(BoxEstado.getSelectedItem().toString(), ".txt");
               } catch (IOException ex) {
                   Logger.getLogger(ExercicioIII.class.getName()).log(Level.SEVERE, null, ex);
               }             
               boolean exists = temp.exists();
               if(temp.exists()){
                   BufferedReader in = null;
                   String line;
                   try {
                       in = new BufferedReader(new FileReader(BoxEstado.getSelectedItem().toString()+".txt"));
                       while ((line = in.readLine()) != null) {
                           listmodel.addElement(line);
                       }
                   } catch (IOException ex) {
                      
                   } finally {
                       if (in != null) {
                           try {
                               in.close();
                           } catch (IOException ex) {
                               Logger.getLogger(ExercicioIII.class.getName()).log(Level.SEVERE, null, ex);
                           }
                       }
                   }
               }
    }//GEN-LAST:event_TextCidadeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ExercicioIII.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ExercicioIII.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ExercicioIII.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ExercicioIII.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ExercicioIII().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox BoxEstado;
    private javax.swing.JButton ButtonAdd;
    private javax.swing.JButton ButtonClean;
    private javax.swing.JButton ButtonRemove;
    private javax.swing.JButton ButtonSave;
    private javax.swing.JList ListCidades;
    private javax.swing.JTextField TextCidade;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
